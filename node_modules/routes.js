/**
 * Local module vars
 */
var staticCache = {};
var db = {};
var mongoColl = 'zips';

/**
 * Caller injects a MongoDb reference here.
 */
exports.setDb = function(dbInstance) {
	db = dbInstance;
};

/**
 *  Populate the cache.
 */
exports.populateCache = function( fs ) {

    //  Local cache for static content. We sync-read just once per file.
    staticCache[ 'index.html' ] = fs.readFileSync( './index.html' );
    staticCache[ 'app.js' ] = fs.readFileSync( './scripts/app.js' );
	staticCache[ 'jquery.ui.map.full.min.js' ] = fs.readFileSync( './scripts/jquery.ui.map.full.min.js' );	
}; 
	
/**
 *  Retrieve entry (content) from cache.
 *  @param {string} key  Key identifying content to retrieve from cache.
 */
var cache_get = function(key) { return staticCache[key]; };

/**
 *  Create REST routing functions in an object.
 *  Return that object to the caller.
 */
exports.createRoutes = function( app ) {

    var routes = { }

    // Static routes for /health, /asciimo /scripts, and /index.html

    routes[ '/health' ] = function( req, res ) {
        res.send( '1' );
    }; /* health */

    routes[ '/asciimo' ] = function(req, res) {
        var link = "./images/panorama.jpg";
        res.send("<html><body><img src='" + link + "'></body></html>");
    }; /* asciimo */

    routes[ '/' ] = function(req, res) {
        res.setHeader('Content-Type', 'text/html');
        res.send(cache_get('index.html') );
    }; /* root */

	routes[ '/scripts/app.js' ] = function(req, res) {
		res.setHeader('Content-Type', 'text/javascript');
		res.send(cache_get('app.js') );
	}; /* scripts */
	
	routes[ '/scripts/jquery.ui.map.full.min.js' ] = function( req, res ) {
		res.setHeader('Content-Type', 'text/javascript');
		res.send(cache_get('jquery.ui.map.full.min.js') );
	}; /* scripts */

	// REST routes -- parameterized
	
	routes[ '/near/zip/:zip' ] = function( req, res)  {

		// Fuquay record
		// db.zips.find({loc: {$near: [ 35.579952, 78.780807 ]}}) -->

		var zipCode = req.params.zip;

		db.collection( mongoColl ).find( { zip : zipCode } ).toArray( function( err, center)  {
			var x, y, record;
			if ( center && center.length > 0 ){
				record = center[0];
				y = record.loc.y;
				x = record.loc.x;
				res.redirect( "/near/lat/" + y + "/lon/" + x );
			} else {
				res.redirect("/");
			}
		});

	}; /* nearZip */
	
	routes[ '/near/lat/:lat/lon/:lon' ] = function( req, res  ) {

		var limit = 10;
		var lat =  Number( req.params.lat );
		var lon =  Number( req.params.lon );
		var query = { loc: {$near: [ lat, lon ] } }

		db.collection( mongoColl ).find( query ).limit( limit ).toArray( function( err, locations ) {
			if (!locations ) {
				res.send('{err: "Nothing found"}');
			} else {
				res.send(locations);
			}
		});
  	}; /* nearLatLon */
	
	routes[ '/cities/:like' ] = function( req, res ) {
	
		var limit = 20;
		var like = req.params.like;
		var query = {};
		
		if (!like) {
			res.send( '{ err: "Bad input" } ');
		} else {
			// Regexp wildcard suffix query				
			query = { city: { $regex: (/^%s.*$/, like) } };
			console.log(query);

			db.collection( mongoColl ).find( query ).limit( limit ).toArray( function( err, cities ) {
				if ( !cities ) {
					res.send( '{ err: "Nothing found" }' );
				} else {
					res.send( cities );
				}
			});	
		}		
	}; /* cities search */

	return routes;
}; /* create routes */
